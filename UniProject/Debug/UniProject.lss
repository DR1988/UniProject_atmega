
UniProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  0000039a  0000040e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dce  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c60  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000402  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000022fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bd  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000178  00000000  00000000  0000293d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002ab5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e9       	ldi	r30, 0x9A	; 154
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	76 d0       	rcall	.+236    	; 0x1fc <main>
 110:	42 c1       	rjmp	.+644    	; 0x396 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <TransmitUART0>:
}

void TransmitUART0(unsigned char data)
{
	//Wait until the Transmitter is ready
	while (! (UCSR0A & (1 << UDRE0)) );
 114:	e0 ec       	ldi	r30, 0xC0	; 192
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	90 81       	ld	r25, Z
 11a:	95 ff       	sbrs	r25, 5
 11c:	fd cf       	rjmp	.-6      	; 0x118 <TransmitUART0+0x4>

	//Get that data out a here!
	UDR0 = data;
 11e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 122:	08 95       	ret

00000124 <TransmitString>:
}

void TransmitString(unsigned char *s)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	ec 01       	movw	r28, r24
	while (*s != 0) TransmitUART0(*s++);
 12a:	88 81       	ld	r24, Y
 12c:	88 23       	and	r24, r24
 12e:	29 f0       	breq	.+10     	; 0x13a <TransmitString+0x16>
 130:	21 96       	adiw	r28, 0x01	; 1
 132:	f0 df       	rcall	.-32     	; 0x114 <TransmitUART0>
 134:	89 91       	ld	r24, Y+
	TransmitUART0(10);
 136:	81 11       	cpse	r24, r1
	TransmitUART0(13);
 138:	fc cf       	rjmp	.-8      	; 0x132 <TransmitString+0xe>
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	eb df       	rcall	.-42     	; 0x114 <TransmitUART0>
}
 13e:	8d e0       	ldi	r24, 0x0D	; 13
 140:	e9 df       	rcall	.-46     	; 0x114 <TransmitUART0>
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <InitializeUART0>:

void InitializeUART0(int Baud, char AsyncDoubleSpeed, char DataSizeInBits, char ParityEVEorODD, char StopBits)
{
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	16 2f       	mov	r17, r22
 152:	c4 2f       	mov	r28, r20
 154:	d2 2f       	mov	r29, r18
	uint16_t UBBRValue = lrint( F_CPU / 16L / Baud ) - 1;
 156:	9c 01       	movw	r18, r24
 158:	99 0f       	add	r25, r25
 15a:	44 0b       	sbc	r20, r20
 15c:	55 0b       	sbc	r21, r21
 15e:	60 e4       	ldi	r22, 0x40	; 64
 160:	72 e4       	ldi	r23, 0x42	; 66
 162:	8f e0       	ldi	r24, 0x0F	; 15
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	f5 d0       	rcall	.+490    	; 0x352 <__udivmodsi4>
 168:	ca 01       	movw	r24, r20
 16a:	b9 01       	movw	r22, r18
 16c:	52 d0       	rcall	.+164    	; 0x212 <__floatunsisf>
 16e:	8e d0       	rcall	.+284    	; 0x28c <lrint>
 170:	61 50       	subi	r22, 0x01	; 1
 172:	71 09       	sbc	r23, r1
	
	if (AsyncDoubleSpeed == 1) UCSR0A = (1 << U2X0); // setting the U2X bit to 1 for double speed async
 174:	11 30       	cpi	r17, 0x01	; 1
 176:	19 f4       	brne	.+6      	; 0x17e <InitializeUART0+0x36>
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	
	//Put the upper part of the baud number here (bits 8 to 11)
	UBRR1H = (unsigned char) (UBBRValue >> 8);
 17e:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
	
	UBRR0L = UBBRValue;
 182:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	//Enable the receiver and transmitter
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 186:	88 e1       	ldi	r24, 0x18	; 24
 188:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	
	//set 2 stop bits
	if (StopBits == 2) UCSR0C = (1 << USBS0);
 18c:	02 30       	cpi	r16, 0x02	; 2
 18e:	19 f4       	brne	.+6      	; 0x196 <InitializeUART0+0x4e>
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	
	if (ParityEVEorODD == EVEN) UCSR0C |= (1 << UPM01);
 196:	d1 11       	cpse	r29, r1
 198:	06 c0       	rjmp	.+12     	; 0x1a6 <InitializeUART0+0x5e>
 19a:	e2 ec       	ldi	r30, 0xC2	; 194
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 62       	ori	r24, 0x20	; 32
 1a2:	80 83       	st	Z, r24
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <InitializeUART0+0x6c>
	if (ParityEVEorODD == ODD) UCSR0C |= (3 << UPM01);
 1a6:	d1 30       	cpi	r29, 0x01	; 1
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <InitializeUART0+0x6c>
 1aa:	e2 ec       	ldi	r30, 0xC2	; 194
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 66       	ori	r24, 0x60	; 96
 1b2:	80 83       	st	Z, r24
	
	if (DataSizeInBits == 6) UCSR0C |= (1 << UCSZ00); // 6 bit data length
 1b4:	c6 30       	cpi	r28, 0x06	; 6
 1b6:	31 f4       	brne	.+12     	; 0x1c4 <InitializeUART0+0x7c>
 1b8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	80 83       	st	Z, r24
 1c2:	10 c0       	rjmp	.+32     	; 0x1e4 <InitializeUART0+0x9c>
	if (DataSizeInBits == 7) UCSR0C |= (2 << UCSZ00); // 7 bit data length
 1c4:	c7 30       	cpi	r28, 0x07	; 7
 1c6:	31 f4       	brne	.+12     	; 0x1d4 <InitializeUART0+0x8c>
 1c8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	80 83       	st	Z, r24
 1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <InitializeUART0+0xaa>
	if (DataSizeInBits == 8) UCSR0C |= (3 << UCSZ00); // 8 bit data length
 1d4:	c8 30       	cpi	r28, 0x08	; 8
 1d6:	31 f4       	brne	.+12     	; 0x1e4 <InitializeUART0+0x9c>
 1d8:	e2 ec       	ldi	r30, 0xC2	; 194
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <InitializeUART0+0xaa>
	if (DataSizeInBits == 9) UCSR0C |= (7 << UCSZ00); // 9 bit data length
 1e4:	c9 30       	cpi	r28, 0x09	; 9
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <InitializeUART0+0xaa>
 1e8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8e 60       	ori	r24, 0x0E	; 14
 1f0:	80 83       	st	Z, r24
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	08 95       	ret

000001fc <main>:

#define F_CPU 16000000UL

int main(void)
{
		InitializeUART0(9600, 0, 8, 0, 0);
 1fc:	00 e0       	ldi	r16, 0x00	; 0
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	48 e0       	ldi	r20, 0x08	; 8
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	95 e2       	ldi	r25, 0x25	; 37
 208:	9f df       	rcall	.-194    	; 0x148 <InitializeUART0>
		
    /* Replace with your application code */
    while (1) 
    {
			TransmitString("Hello World");
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	92 e0       	ldi	r25, 0x02	; 2
 20e:	8a df       	rcall	.-236    	; 0x124 <TransmitString>
 210:	fc cf       	rjmp	.-8      	; 0x20a <main+0xe>

00000212 <__floatunsisf>:
 212:	e8 94       	clt
 214:	09 c0       	rjmp	.+18     	; 0x228 <__floatsisf+0x12>

00000216 <__floatsisf>:
 216:	97 fb       	bst	r25, 7
 218:	3e f4       	brtc	.+14     	; 0x228 <__floatsisf+0x12>
 21a:	90 95       	com	r25
 21c:	80 95       	com	r24
 21e:	70 95       	com	r23
 220:	61 95       	neg	r22
 222:	7f 4f       	sbci	r23, 0xFF	; 255
 224:	8f 4f       	sbci	r24, 0xFF	; 255
 226:	9f 4f       	sbci	r25, 0xFF	; 255
 228:	99 23       	and	r25, r25
 22a:	a9 f0       	breq	.+42     	; 0x256 <__floatsisf+0x40>
 22c:	f9 2f       	mov	r31, r25
 22e:	96 e9       	ldi	r25, 0x96	; 150
 230:	bb 27       	eor	r27, r27
 232:	93 95       	inc	r25
 234:	f6 95       	lsr	r31
 236:	87 95       	ror	r24
 238:	77 95       	ror	r23
 23a:	67 95       	ror	r22
 23c:	b7 95       	ror	r27
 23e:	f1 11       	cpse	r31, r1
 240:	f8 cf       	rjmp	.-16     	; 0x232 <__floatsisf+0x1c>
 242:	fa f4       	brpl	.+62     	; 0x282 <__floatsisf+0x6c>
 244:	bb 0f       	add	r27, r27
 246:	11 f4       	brne	.+4      	; 0x24c <__floatsisf+0x36>
 248:	60 ff       	sbrs	r22, 0
 24a:	1b c0       	rjmp	.+54     	; 0x282 <__floatsisf+0x6c>
 24c:	6f 5f       	subi	r22, 0xFF	; 255
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	8f 4f       	sbci	r24, 0xFF	; 255
 252:	9f 4f       	sbci	r25, 0xFF	; 255
 254:	16 c0       	rjmp	.+44     	; 0x282 <__floatsisf+0x6c>
 256:	88 23       	and	r24, r24
 258:	11 f0       	breq	.+4      	; 0x25e <__floatsisf+0x48>
 25a:	96 e9       	ldi	r25, 0x96	; 150
 25c:	11 c0       	rjmp	.+34     	; 0x280 <__floatsisf+0x6a>
 25e:	77 23       	and	r23, r23
 260:	21 f0       	breq	.+8      	; 0x26a <__floatsisf+0x54>
 262:	9e e8       	ldi	r25, 0x8E	; 142
 264:	87 2f       	mov	r24, r23
 266:	76 2f       	mov	r23, r22
 268:	05 c0       	rjmp	.+10     	; 0x274 <__floatsisf+0x5e>
 26a:	66 23       	and	r22, r22
 26c:	71 f0       	breq	.+28     	; 0x28a <__floatsisf+0x74>
 26e:	96 e8       	ldi	r25, 0x86	; 134
 270:	86 2f       	mov	r24, r22
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	2a f0       	brmi	.+10     	; 0x282 <__floatsisf+0x6c>
 278:	9a 95       	dec	r25
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	88 1f       	adc	r24, r24
 280:	da f7       	brpl	.-10     	; 0x278 <__floatsisf+0x62>
 282:	88 0f       	add	r24, r24
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	97 f9       	bld	r25, 7
 28a:	08 95       	ret

0000028c <lrint>:
 28c:	41 d0       	rcall	.+130    	; 0x310 <__fp_splitA>
 28e:	a8 f1       	brcs	.+106    	; 0x2fa <lrint+0x6e>
 290:	9e 57       	subi	r25, 0x7E	; 126
 292:	a8 f1       	brcs	.+106    	; 0x2fe <lrint+0x72>
 294:	98 51       	subi	r25, 0x18	; 24
 296:	60 f0       	brcs	.+24     	; 0x2b0 <lrint+0x24>
 298:	39 f1       	breq	.+78     	; 0x2e8 <lrint+0x5c>
 29a:	98 30       	cpi	r25, 0x08	; 8
 29c:	70 f5       	brcc	.+92     	; 0x2fa <lrint+0x6e>
 29e:	09 2e       	mov	r0, r25
 2a0:	99 27       	eor	r25, r25
 2a2:	66 0f       	add	r22, r22
 2a4:	77 1f       	adc	r23, r23
 2a6:	88 1f       	adc	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	0a 94       	dec	r0
 2ac:	d1 f7       	brne	.-12     	; 0x2a2 <lrint+0x16>
 2ae:	1c c0       	rjmp	.+56     	; 0x2e8 <lrint+0x5c>
 2b0:	bb 27       	eor	r27, r27
 2b2:	99 3f       	cpi	r25, 0xF9	; 249
 2b4:	4c f4       	brge	.+18     	; 0x2c8 <lrint+0x3c>
 2b6:	b1 11       	cpse	r27, r1
 2b8:	b1 e0       	ldi	r27, 0x01	; 1
 2ba:	b6 2b       	or	r27, r22
 2bc:	67 2f       	mov	r22, r23
 2be:	78 2f       	mov	r23, r24
 2c0:	88 27       	eor	r24, r24
 2c2:	98 5f       	subi	r25, 0xF8	; 248
 2c4:	b1 f7       	brne	.-20     	; 0x2b2 <lrint+0x26>
 2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <lrint+0x4c>
 2c8:	86 95       	lsr	r24
 2ca:	77 95       	ror	r23
 2cc:	67 95       	ror	r22
 2ce:	b7 95       	ror	r27
 2d0:	08 f4       	brcc	.+2      	; 0x2d4 <lrint+0x48>
 2d2:	b1 60       	ori	r27, 0x01	; 1
 2d4:	93 95       	inc	r25
 2d6:	c1 f7       	brne	.-16     	; 0x2c8 <lrint+0x3c>
 2d8:	bb 0f       	add	r27, r27
 2da:	30 f4       	brcc	.+12     	; 0x2e8 <lrint+0x5c>
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <lrint+0x56>
 2de:	60 ff       	sbrs	r22, 0
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <lrint+0x5c>
 2e2:	6f 5f       	subi	r22, 0xFF	; 255
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	8f 4f       	sbci	r24, 0xFF	; 255
 2e8:	3e f4       	brtc	.+14     	; 0x2f8 <lrint+0x6c>
 2ea:	90 95       	com	r25
 2ec:	80 95       	com	r24
 2ee:	70 95       	com	r23
 2f0:	61 95       	neg	r22
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	8f 4f       	sbci	r24, 0xFF	; 255
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	08 95       	ret
 2fa:	68 94       	set
 2fc:	24 c0       	rjmp	.+72     	; 0x346 <__fp_szero>
 2fe:	22 c0       	rjmp	.+68     	; 0x344 <__fp_zero>

00000300 <__fp_split3>:
 300:	57 fd       	sbrc	r21, 7
 302:	90 58       	subi	r25, 0x80	; 128
 304:	44 0f       	add	r20, r20
 306:	55 1f       	adc	r21, r21
 308:	59 f0       	breq	.+22     	; 0x320 <__fp_splitA+0x10>
 30a:	5f 3f       	cpi	r21, 0xFF	; 255
 30c:	71 f0       	breq	.+28     	; 0x32a <__fp_splitA+0x1a>
 30e:	47 95       	ror	r20

00000310 <__fp_splitA>:
 310:	88 0f       	add	r24, r24
 312:	97 fb       	bst	r25, 7
 314:	99 1f       	adc	r25, r25
 316:	61 f0       	breq	.+24     	; 0x330 <__fp_splitA+0x20>
 318:	9f 3f       	cpi	r25, 0xFF	; 255
 31a:	79 f0       	breq	.+30     	; 0x33a <__fp_splitA+0x2a>
 31c:	87 95       	ror	r24
 31e:	08 95       	ret
 320:	12 16       	cp	r1, r18
 322:	13 06       	cpc	r1, r19
 324:	14 06       	cpc	r1, r20
 326:	55 1f       	adc	r21, r21
 328:	f2 cf       	rjmp	.-28     	; 0x30e <__fp_split3+0xe>
 32a:	46 95       	lsr	r20
 32c:	f1 df       	rcall	.-30     	; 0x310 <__fp_splitA>
 32e:	08 c0       	rjmp	.+16     	; 0x340 <__fp_splitA+0x30>
 330:	16 16       	cp	r1, r22
 332:	17 06       	cpc	r1, r23
 334:	18 06       	cpc	r1, r24
 336:	99 1f       	adc	r25, r25
 338:	f1 cf       	rjmp	.-30     	; 0x31c <__fp_splitA+0xc>
 33a:	86 95       	lsr	r24
 33c:	71 05       	cpc	r23, r1
 33e:	61 05       	cpc	r22, r1
 340:	08 94       	sec
 342:	08 95       	ret

00000344 <__fp_zero>:
 344:	e8 94       	clt

00000346 <__fp_szero>:
 346:	bb 27       	eor	r27, r27
 348:	66 27       	eor	r22, r22
 34a:	77 27       	eor	r23, r23
 34c:	cb 01       	movw	r24, r22
 34e:	97 f9       	bld	r25, 7
 350:	08 95       	ret

00000352 <__udivmodsi4>:
 352:	a1 e2       	ldi	r26, 0x21	; 33
 354:	1a 2e       	mov	r1, r26
 356:	aa 1b       	sub	r26, r26
 358:	bb 1b       	sub	r27, r27
 35a:	fd 01       	movw	r30, r26
 35c:	0d c0       	rjmp	.+26     	; 0x378 <__udivmodsi4_ep>

0000035e <__udivmodsi4_loop>:
 35e:	aa 1f       	adc	r26, r26
 360:	bb 1f       	adc	r27, r27
 362:	ee 1f       	adc	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	a2 17       	cp	r26, r18
 368:	b3 07       	cpc	r27, r19
 36a:	e4 07       	cpc	r30, r20
 36c:	f5 07       	cpc	r31, r21
 36e:	20 f0       	brcs	.+8      	; 0x378 <__udivmodsi4_ep>
 370:	a2 1b       	sub	r26, r18
 372:	b3 0b       	sbc	r27, r19
 374:	e4 0b       	sbc	r30, r20
 376:	f5 0b       	sbc	r31, r21

00000378 <__udivmodsi4_ep>:
 378:	66 1f       	adc	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	88 1f       	adc	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	1a 94       	dec	r1
 382:	69 f7       	brne	.-38     	; 0x35e <__udivmodsi4_loop>
 384:	60 95       	com	r22
 386:	70 95       	com	r23
 388:	80 95       	com	r24
 38a:	90 95       	com	r25
 38c:	9b 01       	movw	r18, r22
 38e:	ac 01       	movw	r20, r24
 390:	bd 01       	movw	r22, r26
 392:	cf 01       	movw	r24, r30
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
